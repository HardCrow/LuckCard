一、缓存  redis缓存可以大大减少服务器的压力，合理的利用缓存不仅能够提升网站访问速度，
还能大大降低数据库的压力，而使用 Redis 缓存数据也非常简单，只需要通过string类型将序列化后的对象存起来即可
二、排行榜  利用Redis的zset结构能实现各种复杂的排行榜应用。比如使用zset和一个计算热度的算法便可以轻松打造一个热度排行榜，
zrevrangebyscore可以得到以分数倒序排列的序列，zrank可以得到一个成员在该排行榜的位置（是分数正序排列时的位置，如果要获取倒序排列时的位置需要用zcard-zrank）。
三、计数器  如文章的阅读量、微博点赞数、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。
四、限流  在某些秒杀活动中，瞬间会有大量的用户请求涌入，而且大概率也会出现同一用户不断刷新页面或者其他操作来发送大量请求的情况
我们可以利用Redis的incr方法，以访问者的ip和其他信息作为key，访问一次增加一次计数，
当同一用户的访问次数超过我们预先设定的次数则返回提示信息（比如提示用户操作过于频繁，一定时间之后再重新操作等等）。
五、签到
六、抽奖  利用set结构的无序性,通过 Spop（ Redis Spop 命令用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。 ） 随机获得值。



利用redis做一下缓存试一试

  现在是利用mysql数据库做的一个抽奖程序，目前全部步骤都是mysql完成，
  导致MySQL服务器的压力很大，因此本人想利用redis进行分压

 下面是一种常见的将Redis用作MySQL分压的方法：

 将热点数据存储在Redis中：将经常被查询的数据或者频繁被修改的数据存储在Redis中，例如缓存查询结果、热门文章、用户会话等。
 这样可以减少对MySQL的读取请求，提高系统的响应速度。

 使用Redis作为缓存层：将查询结果缓存到Redis中，当下次有相同的查询请求时，先从Redis中获取结果，如果存在则直接返回，避免了对MySQL的查询操作。
 这样可以减轻MySQL的负载，并且加快了系统的响应速度。

 使用Redis实现消息队列：将写入MySQL的操作转换为写入Redis的操作，并使用Redis的发布/订阅功能实现异步处理。这样可以减少对MySQL的写入请求，提高系统的并发能力。

 使用Redis实现计数器：将一些需要频繁更新的计数操作（如点赞数、浏览量等）存储在Redis中，并使用Redis提供的原子操作进行更新。
 这样可以减少对MySQL的写入请求，提高系统的性能。

 由此查询的数据应该是一些不变的东西，存储在redis数据库中然后利用缓存，加快系统的相应的速度，而现在本人的技术不会做redis的消息队列，因此只可以采用第一二种方法
 现在的问题是，抽卡系统好像并没有不变的信息，单单对于抽奖系统来说
 不过的是，可以把登入系统缓存一下，

 想了一下，思路是这样的:
   用redis的set结构去实现，set结构不可以重复并且无序，只需要拿取卡片数字即可。
   拿到的卡片数字，也存入redis中，用map结构去存取，以账户为键，以卡片数字为值，如果一个账户拿取了多组卡片数字则利用账户加标识来识别
   例如:  131账户   拿了两组数字  1 2 3  和  6 8 2
   就可以用map结构，<1311,1 2 3>,<1312,6 8 2>去存取
   后续卡片出现中奖号码就操作删除set结构和map结构
   之前的利用MySQL、实现抢卡暂时不删除，不使用即可
   再创建一个新的类，去实现该结构即可

24.3.2
现在就是把前端搞一下就可以还有redis里面的问题
例如：
缓存穿透，击穿，雪崩等等，优化问题
不过我要先做前端

可以用拼接的手段